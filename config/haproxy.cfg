# HAProxy Configuration for GitHub RunnerHub High Availability
# Version: 2.8+
# Author: GitHub RunnerHub HA Team

global
    # Daemon mode
    daemon
    
    # Process management
    master-worker
    maxconn 4096
    
    # Logging
    log stdout local0 info
    log-tag "runnerhub-lb"
    
    # SSL/TLS
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-dh-param-file /etc/ssl/certs/dhparam.pem
    
    # Statistics
    stats socket /var/run/haproxy-admin.sock mode 660 level admin
    stats timeout 30s

defaults
    # Mode
    mode http
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout check 3000ms
    
    # Retries
    retries 3
    option redispatch
    
    # Logging
    option httplog
    option dontlognull
    option log-health-checks
    
    # Headers
    option forwardfor
    option http-server-close
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend for HTTP/HTTPS traffic
frontend runnerhub_frontend
    # Bind ports
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/runnerhub.pem alpn h2,http/1.1
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # Health check endpoint
    acl health_check path_beg /health
    use_backend health_backend if health_check
    
    # API endpoints
    acl api_request path_beg /api
    use_backend orchestrator_api_backend if api_request
    
    # WebSocket connections
    acl websocket_request hdr(Upgrade) -i websocket
    use_backend websocket_backend if websocket_request
    
    # Metrics endpoint
    acl metrics_request path_beg /metrics
    use_backend metrics_backend if metrics_request
    
    # Default backend
    default_backend orchestrator_web_backend

# Frontend for administrative interface
frontend admin_frontend
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:${HAPROXY_STATS_PASSWORD}

# Backend for health checks
backend health_backend
    option httpchk GET /health
    balance roundrobin
    
    # Orchestrator instances
    server orchestrator-1 ${ORCHESTRATOR_1_HOST:-192.168.1.10}:3001 check inter 5s fall 3 rise 2
    server orchestrator-2 ${ORCHESTRATOR_2_HOST:-192.168.1.11}:3001 check inter 5s fall 3 rise 2
    server orchestrator-3 ${ORCHESTRATOR_3_HOST:-192.168.1.12}:3001 check inter 5s fall 3 rise 2

# Backend for API requests
backend orchestrator_api_backend
    option httpchk GET /health
    balance roundrobin
    
    # Connection pooling
    http-reuse safe
    
    # Health checking
    option httpchk GET /api/health
    http-check expect status 200
    
    # Servers
    server orchestrator-1 ${ORCHESTRATOR_1_HOST:-192.168.1.10}:3001 check inter 10s fall 3 rise 2 weight 100
    server orchestrator-2 ${ORCHESTRATOR_2_HOST:-192.168.1.11}:3001 check inter 10s fall 3 rise 2 weight 100
    server orchestrator-3 ${ORCHESTRATOR_3_HOST:-192.168.1.12}:3001 check inter 10s fall 3 rise 2 weight 100

# Backend for web interface
backend orchestrator_web_backend
    option httpchk GET /health
    balance roundrobin
    
    # Cookie-based session affinity for web UI
    cookie SERVERID insert indirect nocache
    
    # Servers with cookie values
    server orchestrator-1 ${ORCHESTRATOR_1_HOST:-192.168.1.10}:3001 check inter 10s fall 3 rise 2 cookie o1
    server orchestrator-2 ${ORCHESTRATOR_2_HOST:-192.168.1.11}:3001 check inter 10s fall 3 rise 2 cookie o2
    server orchestrator-3 ${ORCHESTRATOR_3_HOST:-192.168.1.12}:3001 check inter 10s fall 3 rise 2 cookie o3

# Backend for WebSocket connections
backend websocket_backend
    # Source IP-based persistence for WebSocket connections
    balance source
    
    # Health checking
    option httpchk GET /health
    http-check expect status 200
    
    # WebSocket timeout settings
    timeout tunnel 3600s
    
    # Servers
    server ws-1 ${ORCHESTRATOR_1_HOST:-192.168.1.10}:3002 check inter 30s fall 3 rise 2
    server ws-2 ${ORCHESTRATOR_2_HOST:-192.168.1.11}:3002 check inter 30s fall 3 rise 2
    server ws-3 ${ORCHESTRATOR_3_HOST:-192.168.1.12}:3002 check inter 30s fall 3 rise 2

# Backend for Prometheus metrics
backend metrics_backend
    option httpchk GET /metrics
    balance roundrobin
    
    # Servers
    server metrics-1 ${ORCHESTRATOR_1_HOST:-192.168.1.10}:3001 check inter 30s fall 3 rise 2
    server metrics-2 ${ORCHESTRATOR_2_HOST:-192.168.1.11}:3001 check inter 30s fall 3 rise 2
    server metrics-3 ${ORCHESTRATOR_3_HOST:-192.168.1.12}:3001 check inter 30s fall 3 rise 2

# Grafana backend (optional monitoring)
backend grafana_backend
    option httpchk GET /api/health
    balance roundrobin
    
    server grafana ${GRAFANA_HOST:-192.168.1.30}:3000 check inter 30s fall 3 rise 2

# Prometheus backend (optional monitoring)  
backend prometheus_backend
    option httpchk GET /-/healthy
    balance roundrobin
    
    server prometheus ${PROMETHEUS_HOST:-192.168.1.31}:9090 check inter 30s fall 3 rise 2

# Listen section for custom protocols
listen runnerhub_ssh_proxy
    bind *:2222
    mode tcp
    balance roundrobin
    
    # SSH proxy for runner management
    server ssh-1 ${ORCHESTRATOR_1_HOST:-192.168.1.10}:2222 check
    server ssh-2 ${ORCHESTRATOR_2_HOST:-192.168.1.11}:2222 check
    server ssh-3 ${ORCHESTRATOR_3_HOST:-192.168.1.12}:2222 check

# Additional configuration for monitoring integration
listen stats
    bind *:9999
    mode http
    stats enable
    stats uri /
    stats refresh 5s
    stats admin if TRUE
    stats auth ${HAPROXY_STATS_USER:-admin}:${HAPROXY_STATS_PASSWORD:-admin123}
    
    # Export HAProxy stats for Prometheus
    http-request use-service prometheus-exporter if { path /metrics }

# Error pages configuration
errorfile 503 /etc/haproxy/errors/503-custom.http

# Logging configuration for debugging
# Uncomment the following lines for detailed debugging
# global
#     log 127.0.0.1:514 local1 debug
# defaults
#     option httplog clf