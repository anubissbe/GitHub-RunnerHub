# Production Docker Compose for GitHub-RunnerHub v2.0.0
# Optimized for production deployment with security hardening

version: '3.9'

services:
  # Main application service
  runnerhub:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        VERSION: 2.0.0
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    image: ghcr.io/anubissbe/github-runnerhub:2.0.0
    container_name: github-runnerhub-app
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # Core Configuration
      NODE_ENV: production
      PORT: 3001
      
      # Database
      DATABASE_URL: postgresql://runnerhub:${POSTGRES_PASSWORD}@postgres:5432/runnerhub
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # GitHub Integration
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_ORG: ${GITHUB_ORG}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      
      # Security (Required for Production)
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      SECURITY_LEVEL: high
      ENABLE_SECURITY_SCANNING: true
      ENABLE_AUDIT_LOGGING: true
      
      # Performance
      ENABLE_AI_OPTIMIZATION: true
      CONTAINER_POOL_SIZE: 20
      MAX_CONCURRENT_JOBS: 100
      
      # Rate Limiting
      API_RATE_LIMIT: 1000
      API_RATE_WINDOW: 3600000
      
      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: json
      
    volumes:
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - runnerhub-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    labels:
      - "com.github-runnerhub.service=app"
      - "com.github-runnerhub.version=2.0.0"

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: github-runnerhub-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: runnerhub
      POSTGRES_USER: runnerhub
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U runnerhub -d runnerhub"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - runnerhub-network
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.github-runnerhub.service=database"

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: github-runnerhub-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - runnerhub-network
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.github-runnerhub.service=cache"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: github-runnerhub-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - runnerhub-network
    labels:
      - "com.github-runnerhub.service=monitoring"

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: github-runnerhub-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - runnerhub-network
    labels:
      - "com.github-runnerhub.service=visualization"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: github-runnerhub-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - runnerhub
    networks:
      - runnerhub-network
    labels:
      - "com.github-runnerhub.service=proxy"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  runnerhub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16