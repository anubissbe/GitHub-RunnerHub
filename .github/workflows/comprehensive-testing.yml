name: Comprehensive Testing Suite

on:
  # Temporarily disabled - needs test suites to be properly configured
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main, develop ]
  # schedule:
  #   # Run tests daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        test-type: [unit, integration, e2e, security]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: github_runnerhub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run typecheck
    
    - name: Setup test environment
      run: |
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/github_runnerhub_test" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key" >> $GITHUB_ENV
    
    - name: Run ${{ matrix.test-type }} tests
      run: npm run test:${{ matrix.test-type }}
      env:
        CI: true
    
    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit' && matrix.node-version == '20.x'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  load-testing:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Artillery
      run: npm install -g artillery@latest
    
    - name: Build and start application
      run: |
        npm run build
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        DATABASE_URL: sqlite::memory:
        REDIS_HOST: localhost
    
    - name: Run load tests
      run: npm run test:load
      continue-on-error: true
    
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: |
          tests/load/results/
          *.json

  security-scan:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true

  docker-testing:
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: github-runnerhub:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container \
          -p 3001:3001 \
          -e NODE_ENV=test \
          -e DATABASE_URL=sqlite::memory: \
          github-runnerhub:test
        
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3001/health || exit 1
        
        docker stop test-container

  performance-benchmarks:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance benchmarks
      run: |
        npm run build
        node scripts/performance-benchmarks.js
      continue-on-error: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-benchmarks
        path: benchmarks/

  test-summary:
    runs-on: ubuntu-latest
    needs: [test-matrix, load-testing, security-scan, docker-testing]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Test Matrix: ${{ needs.test-matrix.result }}"
        echo "Load Testing: ${{ needs.load-testing.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Docker Testing: ${{ needs.docker-testing.result }}"
        
        if [ "${{ needs.test-matrix.result }}" != "success" ]; then
          echo "❌ Test matrix failed"
          exit 1
        fi
        
        if [ "${{ needs.docker-testing.result }}" != "success" ]; then
          echo "❌ Docker testing failed"
          exit 1
        fi
        
        echo "✅ All critical tests passed"