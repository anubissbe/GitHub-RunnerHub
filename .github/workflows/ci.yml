name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  backend:
    name: Backend Tests
    runs-on: [self-hosted, runnerhub]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: |
        cd backend
        npm ci || npm install
        
    - name: Run linter
      run: |
        cd backend
        npm run lint || echo "No lint script"
        
    - name: Run tests
      run: |
        cd backend
        npm test || echo "No tests yet"

  frontend:
    name: Frontend Tests
    runs-on: [self-hosted, runnerhub]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: |
        cd frontend
        npm ci || npm install
        
    - name: Type check
      run: |
        cd frontend
        npm run type-check || npx tsc --noEmit
        
    - name: Build
      run: |
        cd frontend
        npm run build
        
    - name: Run tests
      run: |
        cd frontend
        npm test || echo "No tests yet"

  docker:
    name: Docker Build
    runs-on: [self-hosted, runnerhub]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Backend Docker Image
      run: |
        cd backend
        docker build -t github-runnerhub-backend:test .
        
    - name: Build Frontend Docker Image
      run: |
        cd frontend
        docker build -t github-runnerhub-frontend:test .
        
    - name: Test Docker Compose
      run: |
        # Create test environment file
        cat > .env << EOF
        GITHUB_TOKEN=test-token
        GITHUB_ORG=test-org
        GITHUB_REPO=test-repo
        MIN_RUNNERS=5
        MAX_RUNNERS=50
        SCALE_THRESHOLD=0.8
        SCALE_INCREMENT=5
        API_PORT=8300
        UI_PORT=8080
        EOF
        
        # Test docker-compose config
        docker-compose config

  security:
    name: Security Scan
    runs-on: [self-hosted, runnerhub]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
