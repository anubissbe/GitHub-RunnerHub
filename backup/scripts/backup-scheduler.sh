#!/bin/bash
# GitHub-RunnerHub Backup Scheduler
# Automates backup scheduling and management

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
CONFIG_FILE="$SCRIPT_DIR/../config/backup-schedule.conf"
CRON_JOB_FILE="/tmp/runnerhub-backup-cron"

# Default schedules
DEFAULT_FULL_BACKUP_SCHEDULE="0 2 * * 0"      # Sunday 2 AM
DEFAULT_INCREMENTAL_SCHEDULE="0 */6 * * *"    # Every 6 hours
DEFAULT_REDIS_BACKUP_SCHEDULE="0 */2 * * *"   # Every 2 hours
DEFAULT_CONFIG_BACKUP_SCHEDULE="0 1 * * *"    # Daily 1 AM
DEFAULT_LOG_CLEANUP_SCHEDULE="0 3 * * 1"      # Monday 3 AM

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Load configuration
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        log_warn "Configuration file not found, using defaults"
        create_default_config
    fi
}

# Create default configuration file
create_default_config() {
    log_info "Creating default backup schedule configuration..."
    
    mkdir -p "$(dirname "$CONFIG_FILE")"
    
    cat > "$CONFIG_FILE" << EOF
# GitHub-RunnerHub Backup Schedule Configuration

# Full system backup (weekly)
FULL_BACKUP_SCHEDULE="$DEFAULT_FULL_BACKUP_SCHEDULE"
FULL_BACKUP_ENABLED=true

# Incremental PostgreSQL backup (every 6 hours)
INCREMENTAL_BACKUP_SCHEDULE="$DEFAULT_INCREMENTAL_SCHEDULE"
INCREMENTAL_BACKUP_ENABLED=true

# Redis backup (every 2 hours)
REDIS_BACKUP_SCHEDULE="$DEFAULT_REDIS_BACKUP_SCHEDULE"
REDIS_BACKUP_ENABLED=true

# Configuration backup (daily)
CONFIG_BACKUP_SCHEDULE="$DEFAULT_CONFIG_BACKUP_SCHEDULE"
CONFIG_BACKUP_ENABLED=true

# Log cleanup (weekly)
LOG_CLEANUP_SCHEDULE="$DEFAULT_LOG_CLEANUP_SCHEDULE"
LOG_CLEANUP_ENABLED=true

# Disaster recovery test (monthly)
DR_TEST_SCHEDULE="0 4 1 * *"
DR_TEST_ENABLED=true

# Backup paths
BACKUP_SCRIPT_PATH="$SCRIPT_DIR/backup-manager.sh"
DR_TEST_SCRIPT_PATH="$SCRIPT_DIR/disaster-recovery-test.sh"

# Notification settings
ENABLE_NOTIFICATIONS=true
SLACK_WEBHOOK_URL=""
EMAIL_RECIPIENT=""

# Log settings
LOG_FILE="/var/log/runnerhub-backup.log"
ENABLE_LOGGING=true
EOF
    
    log_info "Default configuration created at: $CONFIG_FILE"
}

# Install backup schedules
install_schedules() {
    log_info "Installing backup schedules..."
    
    load_config
    
    # Create cron job file
    cat > "$CRON_JOB_FILE" << EOF
# GitHub-RunnerHub Automated Backup Schedules
# Generated by backup-scheduler.sh on $(date)

SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=""

EOF
    
    # Add full backup schedule
    if [ "${FULL_BACKUP_ENABLED:-true}" = "true" ]; then
        echo "# Full system backup" >> "$CRON_JOB_FILE"
        echo "${FULL_BACKUP_SCHEDULE:-$DEFAULT_FULL_BACKUP_SCHEDULE} $USER cd $PROJECT_ROOT && $BACKUP_SCRIPT_PATH full >> ${LOG_FILE:-/var/log/runnerhub-backup.log} 2>&1" >> "$CRON_JOB_FILE"
        echo "" >> "$CRON_JOB_FILE"
    fi
    
    # Add incremental backup schedule
    if [ "${INCREMENTAL_BACKUP_ENABLED:-true}" = "true" ]; then
        echo "# Incremental PostgreSQL backup" >> "$CRON_JOB_FILE"
        echo "${INCREMENTAL_BACKUP_SCHEDULE:-$DEFAULT_INCREMENTAL_SCHEDULE} $USER cd $PROJECT_ROOT && $BACKUP_SCRIPT_PATH postgres >> ${LOG_FILE:-/var/log/runnerhub-backup.log} 2>&1" >> "$CRON_JOB_FILE"
        echo "" >> "$CRON_JOB_FILE"
    fi
    
    # Add Redis backup schedule
    if [ "${REDIS_BACKUP_ENABLED:-true}" = "true" ]; then
        echo "# Redis backup" >> "$CRON_JOB_FILE"
        echo "${REDIS_BACKUP_SCHEDULE:-$DEFAULT_REDIS_BACKUP_SCHEDULE} $USER cd $PROJECT_ROOT && $BACKUP_SCRIPT_PATH redis >> ${LOG_FILE:-/var/log/runnerhub-backup.log} 2>&1" >> "$CRON_JOB_FILE"
        echo "" >> "$CRON_JOB_FILE"
    fi
    
    # Add configuration backup schedule
    if [ "${CONFIG_BACKUP_ENABLED:-true}" = "true" ]; then
        echo "# Configuration backup" >> "$CRON_JOB_FILE"
        echo "${CONFIG_BACKUP_SCHEDULE:-$DEFAULT_CONFIG_BACKUP_SCHEDULE} $USER cd $PROJECT_ROOT && $BACKUP_SCRIPT_PATH config >> ${LOG_FILE:-/var/log/runnerhub-backup.log} 2>&1" >> "$CRON_JOB_FILE"
        echo "" >> "$CRON_JOB_FILE"
    fi
    
    # Add log cleanup schedule
    if [ "${LOG_CLEANUP_ENABLED:-true}" = "true" ]; then
        echo "# Log cleanup" >> "$CRON_JOB_FILE"
        echo "${LOG_CLEANUP_SCHEDULE:-$DEFAULT_LOG_CLEANUP_SCHEDULE} $USER find /var/log -name '*runnerhub*' -mtime +7 -delete >> ${LOG_FILE:-/var/log/runnerhub-backup.log} 2>&1" >> "$CRON_JOB_FILE"
        echo "" >> "$CRON_JOB_FILE"
    fi
    
    # Add disaster recovery test schedule
    if [ "${DR_TEST_ENABLED:-false}" = "true" ]; then
        echo "# Disaster recovery test" >> "$CRON_JOB_FILE"
        echo "${DR_TEST_SCHEDULE:-0 4 1 * *} $USER cd $PROJECT_ROOT && ${DR_TEST_SCRIPT_PATH:-$SCRIPT_DIR/disaster-recovery-test.sh} >> ${LOG_FILE:-/var/log/runnerhub-backup.log} 2>&1" >> "$CRON_JOB_FILE"
        echo "" >> "$CRON_JOB_FILE"
    fi
    
    # Install cron jobs
    crontab "$CRON_JOB_FILE"
    
    log_info "Backup schedules installed successfully"
    log_info "Cron jobs:"
    crontab -l | grep -E "(runnerhub|backup)" || log_warn "No backup cron jobs found"
}

# Remove backup schedules
remove_schedules() {
    log_info "Removing backup schedules..."
    
    # Get current crontab
    crontab -l > "$CRON_JOB_FILE.tmp" 2>/dev/null || touch "$CRON_JOB_FILE.tmp"
    
    # Remove lines containing backup scripts
    grep -v -E "(backup-manager\.sh|disaster-recovery-test\.sh|runnerhub.*backup)" "$CRON_JOB_FILE.tmp" > "$CRON_JOB_FILE.clean" || true
    
    # Install cleaned crontab
    crontab "$CRON_JOB_FILE.clean"
    
    # Cleanup temp files
    rm -f "$CRON_JOB_FILE.tmp" "$CRON_JOB_FILE.clean"
    
    log_info "Backup schedules removed"
}

# Show current schedules
show_schedules() {
    log_info "Current backup schedules:"
    echo ""
    
    if crontab -l 2>/dev/null | grep -E "(backup-manager\.sh|disaster-recovery-test\.sh|runnerhub.*backup)" > /dev/null; then
        crontab -l | grep -E "(backup-manager\.sh|disaster-recovery-test\.sh|runnerhub.*backup)" | while read line; do
            echo "  $line"
        done
    else
        log_warn "No backup schedules found"
    fi
    echo ""
    
    # Show next scheduled backups
    log_info "Next scheduled backups:"
    if command -v cronitor >/dev/null 2>&1; then
        cronitor list | grep -i backup || log_warn "No scheduled backups found"
    else
        log_warn "cronitor not available - install for better schedule monitoring"
    fi
}

# Test backup schedule
test_schedule() {
    log_info "Testing backup schedule..."
    
    load_config
    
    # Test if backup script exists and is executable
    if [ -f "${BACKUP_SCRIPT_PATH:-$SCRIPT_DIR/backup-manager.sh}" ] && [ -x "${BACKUP_SCRIPT_PATH:-$SCRIPT_DIR/backup-manager.sh}" ]; then
        log_info "Backup script: OK"
    else
        log_error "Backup script not found or not executable: ${BACKUP_SCRIPT_PATH:-$SCRIPT_DIR/backup-manager.sh}"
        return 1
    fi
    
    # Test if DR test script exists
    if [ -f "${DR_TEST_SCRIPT_PATH:-$SCRIPT_DIR/disaster-recovery-test.sh}" ]; then
        log_info "DR test script: OK"
    else
        log_warn "DR test script not found: ${DR_TEST_SCRIPT_PATH:-$SCRIPT_DIR/disaster-recovery-test.sh}"
    fi
    
    # Test cron service
    if systemctl is-active --quiet cron || systemctl is-active --quiet crond; then
        log_info "Cron service: OK"
    else
        log_error "Cron service is not running"
        return 1
    fi
    
    # Test log directory
    LOG_DIR=$(dirname "${LOG_FILE:-/var/log/runnerhub-backup.log}")
    if [ -d "$LOG_DIR" ] && [ -w "$LOG_DIR" ]; then
        log_info "Log directory: OK ($LOG_DIR)"
    else
        log_error "Log directory not writable: $LOG_DIR"
        return 1
    fi
    
    # Test backup directory
    if [ -d "$PROJECT_ROOT" ]; then
        log_info "Project directory: OK"
    else
        log_error "Project directory not found: $PROJECT_ROOT"
        return 1
    fi
    
    log_info "Schedule test completed successfully"
}

# Monitor backup status
monitor_backups() {
    log_info "Monitoring backup status..."
    
    local log_file="${LOG_FILE:-/var/log/runnerhub-backup.log}"
    
    if [ -f "$log_file" ]; then
        echo ""
        echo "Recent backup activity:"
        tail -20 "$log_file" | grep -E "(INFO|ERROR|WARN)" || log_warn "No recent backup activity found"
        echo ""
        
        # Check for recent errors
        if tail -100 "$log_file" | grep -q "ERROR"; then
            log_error "Recent backup errors detected!"
            echo "Recent errors:"
            tail -100 "$log_file" | grep "ERROR" | tail -5
        else
            log_info "No recent backup errors"
        fi
        
        # Check last successful backup
        last_success=$(grep "completed successfully" "$log_file" | tail -1 | awk '{print $1, $2}')
        if [ -n "$last_success" ]; then
            log_info "Last successful backup: $last_success"
        else
            log_warn "No successful backups found in log"
        fi
    else
        log_warn "Backup log file not found: $log_file"
    fi
}

# Create backup report
create_report() {
    local report_file="$PROJECT_ROOT/backup/reports/backup-report-$(date +%Y%m%d).md"
    mkdir -p "$PROJECT_ROOT/backup/reports"
    
    log_info "Creating backup report..."
    
    cat > "$report_file" << EOF
# GitHub-RunnerHub Backup Report

**Date**: $(date)
**Generated by**: backup-scheduler.sh

## Backup Schedule Status

$(crontab -l 2>/dev/null | grep -E "(backup-manager\.sh|disaster-recovery-test\.sh)" | while read line; do
    echo "- \`$line\`"
done)

## Recent Backup Activity

$(if [ -f "${LOG_FILE:-/var/log/runnerhub-backup.log}" ]; then
    echo "\`\`\`"
    tail -50 "${LOG_FILE:-/var/log/runnerhub-backup.log}" | grep -E "(INFO|ERROR|WARN)" | tail -10
    echo "\`\`\`"
else
    echo "No backup log found"
fi)

## System Status

- **Cron Service**: $(systemctl is-active cron crond 2>/dev/null || echo "Unknown")
- **Backup Scripts**: $([ -x "$SCRIPT_DIR/backup-manager.sh" ] && echo "✅ OK" || echo "❌ Missing")
- **Project Directory**: $([ -d "$PROJECT_ROOT" ] && echo "✅ OK" || echo "❌ Missing")
- **Log Directory**: $([ -w "$(dirname "${LOG_FILE:-/var/log/runnerhub-backup.log}")" ] && echo "✅ OK" || echo "❌ Not writable")

## Recommendations

$(if ! crontab -l 2>/dev/null | grep -q backup-manager; then
    echo "- ⚠️ No backup schedules found - run \`backup-scheduler.sh install\`"
fi)

$(if [ ! -f "${LOG_FILE:-/var/log/runnerhub-backup.log}" ]; then
    echo "- ⚠️ No backup log found - ensure backups are running"
fi)

- 📅 Review backup schedules monthly
- 🧪 Test disaster recovery procedures quarterly
- 📊 Monitor backup log files regularly

---
*Generated by backup-scheduler.sh*
EOF
    
    log_info "Backup report created: $report_file"
}

# Main function
main() {
    case "${1:-}" in
        install)
            install_schedules
            ;;
        remove)
            remove_schedules
            ;;
        show)
            show_schedules
            ;;
        test)
            test_schedule
            ;;
        monitor)
            monitor_backups
            ;;
        report)
            create_report
            ;;
        config)
            create_default_config
            ;;
        *)
            echo "GitHub-RunnerHub Backup Scheduler"
            echo ""
            echo "Usage: $0 {install|remove|show|test|monitor|report|config}"
            echo ""
            echo "Commands:"
            echo "  install  - Install backup schedules in crontab"
            echo "  remove   - Remove backup schedules from crontab"
            echo "  show     - Show current backup schedules"
            echo "  test     - Test backup schedule configuration"
            echo "  monitor  - Monitor backup status and logs"
            echo "  report   - Generate backup status report"
            echo "  config   - Create default configuration file"
            echo ""
            echo "Configuration file: $CONFIG_FILE"
            exit 1
            ;;
    esac
}

# Make scripts executable
chmod +x "$SCRIPT_DIR"/*.sh 2>/dev/null || true

# Run main function
main "$@"