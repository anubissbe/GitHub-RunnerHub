version: '3.9'

services:
  # Redis for BullMQ
  redis:
    image: redis:7-alpine
    container_name: runnerhub-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-runnerhub123}
    volumes:
      - redis-data:/data
    networks:
      - runnerhub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-runnerhub123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for state management
  postgres:
    image: ankane/pgvector:latest
    container_name: runnerhub-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-runnerhub}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-runnerhub_secure_2024}
      POSTGRES_DB: ${DB_NAME:-github_runnerhub}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - runnerhub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-runnerhub}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RunnerHub Application
  runnerhub:
    image: node:20-alpine
    container_name: runnerhub-app
    working_dir: /app
    command: sh -c "npm ci && npm run build && npm start"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3001}
      HOST: "0.0.0.0"
      DATABASE_URL: postgresql://${DB_USER:-runnerhub}:${DB_PASSWORD:-runnerhub_secure_2024}@postgres:5432/${DB_NAME:-github_runnerhub}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-runnerhub123}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_ORG: ${GITHUB_ORG}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CORS_ORIGIN: "*"
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "3001:3001"
    networks:
      - runnerhub-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional, but recommended)
  nginx:
    image: nginx:alpine
    container_name: runnerhub-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - runnerhub-network
    depends_on:
      - runnerhub
    restart: unless-stopped

networks:
  runnerhub-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: